var db = require('controllers/database');
var mongoose = require('mongoose');
var demands = mongoose.model('demands');
var downloads = mongoose.model('downloads');

exports.count = function(token,callback) {
	demands.find({token:token, status:'pending', notify:true, index:{$gt:0}},function(err,data){
		if (data.length != 0) {
			var countX = 0;
			for(var i = 0; i < data.length; i++) {
				countX += data[i].index;
			}
			callback({'res':true,'count':countX});
		} else {
			callback({'res':false});
		}
	});
}

exports.boxList = function(token,callback) {
	demands.find({token:token, status:'pending', notify:true, index:{$gt:0}},function(err,data){
		if(data.length != 0){
			callback({'res':true,'data':data});
		}else {
			callback({'res':false});
		}
	});
}

exports.checkDemand = function(idService,token,callback) {
	demands.find({idService:idService,token:token},function(err,data){
		if(data.length != 0){
			callback({'res':true});
		}else {
			callback({'res':false});
		}
	});
}

exports.addDemand = function(service,idService,name,token,username,date,usernameMain,callback) {
	var newdemand = new demands({
		service: service,
		idService: idService,
		name: name,
		token: token,
		username: username,
		date: date,
		main: false,
		usernameMain: usernameMain,
		status: 'pending',
		notify: true,
		pt: 0,
		index: 1
	});
	newdemand.save(function (err) {
		if (err) {
			callback({'res':false, 'response':"Error Demands, you have not added a new demand."});
		}else{
			demands.update({idService:idService, main:true}, {$set: {notify:true}, $inc:{index:+1}},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Demands, you have not added a new demand."});
				} else {
					callback({'res':true, 'response':"Successfully Demands, you have added a new demand."});
				}
			});
		}
	});
}


exports.boxUsersList = function(idService,callback) {
	demands.find({idService:idService, status:'pending', main:false},function(err,data){
		if (data.length != 0) {
			callback({'res':true,'data':data});
		} else {
			callback({'res':false});
		}
	});
}

exports.acceptDemand = function(service,idService,tokenMain,tokenVisitor,usernameVisitor,ageVisitor,callback) {
	demands.update({idService:idService,token:tokenVisitor}, {$set: {status:'accept', notify:false, index:0}},function(err){
		if (err) {
			callback({'res':false, 'response':"Error Demands, you have not accepted this demand."});
		} else {
			demands.update({idService:idService,token:tokenMain}, {$inc:{index:-1}},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Demands, you have not accepted this demand."});
				} else {
					if (service === 'Car') {
						cars.update({_id:idService}, {$push:{usersCopy:{token:tokenVisitor, username:usernameVisitor, age:ageVisitor}}},function(err){
							if (err) {
								callback({'res':false, 'response':"Error Cars, you have not accepted this demand."});
							} else {
								callback({'res':true, 'response':"Successfully Cars, you have accepted this demand."});
							}
						});
					} else if(service === 'Download') {
						downloads.update({_id:idService}, {$push:{usersCopy:{token:tokenVisitor, username:usernameVisitor, age:ageVisitor}}},function(err){
							if (err) {
								callback({'res':false, 'response':"Error Downloads, you have not accepted this demand."});
							} else {
								callback({'res':true, 'response':"Successfully Downloads, you have accepted this demand."});
							}
						});
					} else if(service === 'Event') {
						events.update({_id:idService}, {$push:{usersCopy:{token:tokenVisitor, username:usernameVisitor, age:ageVisitor}}},function(err){
							if (err) {
								callback({'res':false, 'response':"Error Events, you have not accepted this demand."});
							} else {
								callback({'res':true, 'response':"Successfully Events, you have accepted this demand."});
							}
						});
					} else if(service === 'Paper') {
						papers.update({_id:idService}, {$push:{usersCopy:{token:tokenVisitor, username:usernameVisitor, age:ageVisitor}}},function(err){
							if (err) {
								callback({'res':false, 'response':"Error Papers, you have not accepted this demand."});
							} else {
								callback({'res':true, 'response':"Successfully Papers, you have accepted this demand."});
							}
						});
					}
				}
			});
		}
	});
}

exports.refuseDemand = function(idService,tokenMain,tokenVisitor,callback) {
	demands.update({idService:idService,token:tokenVisitor}, {$set:{status:'refuse', notify:false, index:0}},function(err){
		if (err) {
			callback({'res':false, 'response':"Error Demands, you have not refused this demand."});
		} else {
			demands.update({idService:idService,token:tokenMain}, {$inc:{index:-1}},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Demands, you have not refused this demand."});
				} else {
					callback({'res':true, 'response':"Successfully Demands, you have refused this demand."});
				}
			});
		}
	});
}
