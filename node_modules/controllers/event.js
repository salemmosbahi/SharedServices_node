var db = require('controllers/database');
var mongoose = require('mongoose');
var events = mongoose.model('events');
var demands = mongoose.model('demands');
var users = mongoose.model('users');

exports.getEventEnd = function(country,city,callback) {
	events.find({country:country,city:city,status:'complete'},function(err,data){
		if(data.length != 0){
			callback({'res':true,'data':data});
		}else{
			callback({'res':false});
		}
	});
}

exports.getEvent = function(country,city,date,status,callback) {
	var xstatus = '';
	if (status == 'Event complete') {
		xstatus = 'complete';
	} else if (status == 'Event pending') {
		xstatus = 'pending';
	}
	events.find({city:city,date:date,status:xstatus,country:country},function(err,data){
		if (data.length != 0) {
			var dataEvent = [];
			for (i = 0; i < data.length; i++) {
				dataEvent.push({'_id':data[i]._id,'name':data[i].name,'city':data[i].city,'date':data[i].date});
			}
			callback({'res':true,'data':dataEvent});
		} else {
			callback({'res':false});
		}
	}).sort({date:-1});
}

exports.addEvent = function(name,description,latitude,longitude,date,time,token,username,city,country,callback) {
	var idObject = mongoose.Types.ObjectId();
	var newevent = new events({
		_id: idObject,
		name:name,
		description:description,
		latitude:latitude,
		longitude:longitude,
		date:date,
		time:time,
		status:'pending',
		dateComplete:null,
		token:token,
		username:username,
    city:city,
		country:country
	});
	var newdemand = new demands({
		idService: idObject,
		service: "Event",
		name: name,
		token: token,
		username: username,
		date: date,
		main: true,
		usernameMain: username,
		status: 'pending',
		notify: false,
		pt: 0,
		index: 0
	});

	newevent.save(function (err){
		if (err) {
			callback({'res':false, 'response':"Error Events, you have not added a new event."});
		} else{
			newdemand.save(function (err){
				if(err) {
					callback({'res':false, 'response':"Error Demands, you have not added a new event."});
				}else{
					callback({'res':true, 'response':"Successfully Events, you have added a new event."});
				}
			});
		}
	});
}

exports.getEventProfile = function(id,callback) {
	events.find({_id:id},function(err,data){
		if (data.length != 0) {
			callback({'res':true,'data':data});
		}else {
			callback({'res':false});
		}
	});
}

exports.completeEvent = function(idService,token,callback) {
	var dateObj = new Date();
	events.update({_id:idService}, {$set:{status:'complete', dateComplete:dateObj}},function(err){
		if (err) {
			callback({'res':false, 'response':"Error Events, you have not completed a new event."});
		} else {
			demands.update({idService:idService, status:'pending'}, {$set:{status:'refuse', notify:false, index:0}}, {multi:true},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Demands, you have not completed this event."});
				} else {
					users.update({_id:token}, {$inc:{pte:40,ptte:40}},function(err){
						if (err) {
							callback({'res':false, 'response':"Error Users, you have not completed this event."});
						} else {
							callback({'res':true, 'dateComplete':dateObj,'response':"Successfully Events, you have completed this event."});
						}
					});
				}
			});
		}
	});
}

exports.controlVote = function(idService,token,usernameMain,callback) {
	events.find({_id:idService,status:'complete'},{usersCopy:1,usersCopy:{$elemMatch:{token:token}}},function(err,data){
		if (data.length == 0) {
			callback({'res':false});
		} else {
			if (data[0].usersCopy.length != 0) {
				demands.find({idService:idService,token:token,usernameMain:usernameMain},function(err,datax){
					if (datax.length != 0) {
						if (datax[0].pt == 0) {
							callback({'res':true});
						} else {
							callback({'res':false});
						}
					} else {
						callback({'res':false});
					}
				});
			} else {
				callback({'res':false});
			}
		}
	});
}

exports.vote = function(idService,token,pt,callback) {
	demands.update({idService:idService, token:token}, {$set:{pt:pt}},function(err){
		if (err) {
			callback({'res':false, 'response':"Error Demands, you have not voted this event."});
		} else {
			users.update({_id:token}, {$inc:{pte:pt,ptte:10}},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Users, you have not voted this event."});
				} else {
					callback({'res':true, 'response':"Successfully Events, you have voted this event."});
				}
			});
		}
	});
}
