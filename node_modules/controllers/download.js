var db = require('controllers/database');
var mongoose = require('mongoose');
var downloads = mongoose.model('downloads');
var demands = mongoose.model('demands');
var users = mongoose.model('users');

exports.getDownloadEnd = function(country,city,callback) {
	downloads.find({country:country,city:city,status:'complete'},function(err,data){
		if(data.length != 0){
			callback({'res':true,'data':data});
		}else{
			callback({'res':false});
		}
	});
}

exports.getDownload = function(name,date,country,city,status,callback) {
	var oneDay = 86400000;//1000*60*60*24
	var dateApp = (new Date(date)).getTime();
	var xstatus = '';
	if (status == 'Download complete') {
		xstatus = 'complete';
	} else if (status == 'Download pending') {
		xstatus = 'pending';
	}
	if (!name) {
		downloads.find({country:country,city:city,status:xstatus},function(err,data){
			if(data.length != 0){
				var dataDownload = [];
	      for (i = 0; i < data.length; i++) {
					var dateDB = (data[i].date).getTime();
					var diffrence = (dateDB - dateApp) / oneDay;
					if (diffrence >= 0) {
						dataDownload.push({'_id':data[i]._id,'picture':data[i].picture,'name':data[i].name,'size':data[i].size,'date':data[i].date,'status':data[i].status});
					}
	      }
				callback({'res':true,'data':dataDownload});
			}else{
				callback({'res':false});
			}
		}).sort({date:-1});
	} else {
		downloads.find({name:{$regex:new RegExp(name.toLowerCase(), "i")},country:country,city:city,status:xstatus},function(err,data){
			if(data.length != 0){
				var dataDownload = [];
	      for (i = 0; i < data.length; i++) {
					var dateDB = (data[i].date).getTime();
					var diffrence = (dateDB - dateApp) / oneDay;
					if (diffrence >= 0) {
						dataDownload.push({'_id':data[i]._id,'picture':data[i].picture,'name':data[i].name,'size':data[i].size,'date':data[i].date,'status':data[i].status});
					}
	      }
				callback({'res':true,'data':dataDownload});
			}else{
				callback({'res':false});
			}
		}).sort({date:-1});
	}
}

exports.addDownload = function(picture,name,size,token,username,date,city,country,callback) {
	var idObject = mongoose.Types.ObjectId();
	var newdownload = new downloads({
		_id: idObject,
		picture: picture,
		name: name,
		size: size,
		date: new Date(),
		dateComplete: null,
		status: 'pending',
		token: token,
	 	username: username,
		city: city,
		country: country,
	});
	var newdemand = new demands({
		idService: idObject,
		service: "Download",
		name: name,
		token: token,
		username: username,
		date: date,
		main: true,
		usernameMain: username,
		status: 'pending',
		notify: false,
		pt: 0,
		index: 0
	});

	newdownload.save(function (err){
		if(err) {
			callback({'res':false, 'response':"Error Downloads, you have not added a new download."});
		}else{
			newdemand.save(function (err){
				if(err) {
					callback({'res':false, 'response':"Error Demands, you have not added a new download."});
				}else{
					callback({'res':true, 'response':"Successfully Downloads, you have added a new download."});
				}
			});
		}
	});
}

exports.getDownloadProfile = function(id,callback) {
	downloads.find({_id:id},function(err,data){
		if (data.length != 0) {
			callback({'res':true,'data':data});
		}else {
			callback({'res':false});
		}
	});
}

exports.completeDownload = function(idService,token,callback) {
	var dateObj = new Date();
	downloads.update({_id:idService}, {$set:{status:'complete', dateComplete:dateObj}},function(err){
		if (err) {
			callback({'res':false, 'response':"Error Downloads, you have not completed a new download."});
		} else {
			demands.update({idService:idService, status:'pending'}, {$set:{status:'refuse', notify:false, index:0}}, {multi:true},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Demands, you have not completed this download."});
				} else {
					users.update({_id:token}, {$inc:{ptd:40,pttd:40}},function(err){
						if (err) {
							callback({'res':false, 'response':"Error Users, you have not completed this download."});
						} else {
							callback({'res':true, 'dateComplete':dateObj,'response':"Successfully Downloads, you have completed this download."});
						}
					});
				}
			});
		}
	});
}

exports.controlVote = function(idService,token,usernameMain,callback) {
	downloads.find({_id:idService,status:'complete'},{usersCopy:1,usersCopy:{$elemMatch:{token:token}}},function(err,data){
		if (data.length == 0) {
			callback({'res':false});
		} else {
			if (data[0].usersCopy.length != 0) {
				demands.find({idService:idService,token:token,usernameMain:usernameMain},function(err,datax){
					if (datax.length != 0) {
						if (datax[0].pt == 0) {
							callback({'res':true});
						} else {
							callback({'res':false});
						}
					} else {
						callback({'res':false});
					}
				});
			} else {
				callback({'res':false});
			}
		}
	});
}

exports.vote = function(idService,token,pt,callback) {
	demands.update({idService:idService, token:token}, {$set:{pt:pt}},function(err){
		if (err) {
			callback({'res':false, 'response':"Error Demands, you have not voted this download."});
		} else {
			users.update({_id:token}, {$inc:{ptd:pt,pttd:10}},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Users, you have not voted this download."});
				} else {
					callback({'res':true, 'response':"Successfully downloads, you have voted this download."});
				}
			});
		}
	});
}
