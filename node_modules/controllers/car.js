var db = require('controllers/database');
var mongoose = require('mongoose');
var cars = mongoose.model('cars');
var demands = mongoose.model('demands');
var users = mongoose.model('users');

exports.getCarEnd = function(country,depart,callback) {
	cars.find({country:country,depart:depart,status:'complete'},function(err,data){
		if(data.length != 0){
			callback({'res':true,'data':data});
		}else{
			callback({'res':false});
		}
	});
}

exports.getCar = function(country,depart,destination,date,status,goingComing,highway,callback) {
	var xstatus = '';
	if (status == 'Car complete') {
		xstatus = 'complete';
	} else if (status == 'Car pending') {
		xstatus = 'pending';
	}
	cars.find({depart:depart,destination:destination,date:date,goingComing:goingComing,highway:highway,status:xstatus,country:country},function(err,data){
		if (data.length != 0) {
			var dataCar = [];
			for (i = 0; i < data.length; i++) {
				dataCar.push({'_id':data[i]._id,'model':data[i].model,'depart':data[i].depart,'destination':data[i].destination,'date':data[i].date});
			}
			callback({'res':true,'data':dataCar});
		} else {
			callback({'res':false});
		}
	}).sort({date:-1});
}

exports.addCar = function(model,description,depart,destination,latitude,longitude,date,time,goingComing,highway,place,token,username,country,callback) {
	var idObject = mongoose.Types.ObjectId();
	var newcar = new cars({
		_id: idObject,
		model:model,
		description:description,
		depart:depart,
		destination:destination,
		latitude:latitude,
		longitude:longitude,
		date:date,
		time:time,
		goingComing:goingComing,
		highway:highway,
		place:place,
		status:'pending',
		dateComplete:null,
		token:token,
		username:username,
		country:country
	});
	var newdemand = new demands({
		idService: idObject,
		service: "Car",
		name: model + ': ' + depart + '->' + destination,
		token: token,
		username: username,
		date: date,
		main: true,
		usernameMain: username,
		status: 'pending',
		notify: false,
		pt: 0,
		index: 0
	});

	newcar.save(function (err){
		if (err) {
			callback({'res':false, 'response':"Error Cars, you have not added a new car."});
		} else{
			newdemand.save(function (err){
				if(err) {
					callback({'res':false, 'response':"Error Demands, you have not added a new car."});
				}else{
					callback({'res':true, 'response':"Successfully Cars, you have added a new car."});
				}
			});
		}
	});
}

exports.getCarProfile = function(id,callback) {
	cars.find({_id:id},function(err,data){
		if (data.length != 0) {
			callback({'res':true,'data':data});
		}else {
			callback({'res':false});
		}
	});
}

exports.completeCar = function(idService,token,callback) {
	var dateObj = new Date();
	cars.update({_id:idService}, {$set:{status:'complete', dateComplete:dateObj}},function(err){
		if (err) {
			callback({'res':false, 'response':"Error Cars, you have not completed a new car."});
		} else {
			demands.update({idService:idService, status:'pending'}, {$set:{status:'refuse', notify:false, index:0}}, {multi:true},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Demands, you have not completed this car."});
				} else {
					users.update({_id:token}, {$inc:{ptc:40,pttc:40}},function(err){
						if (err) {
							callback({'res':false, 'response':"Error Users, you have not completed this car."});
						} else {
							callback({'res':true, 'dateComplete':dateObj,'response':"Successfully Cars, you have completed this car."});
						}
					});
				}
			});
		}
	});
}

exports.controlVote = function(idService,token,usernameMain,callback) {
	cars.find({_id:idService,status:'complete'},{usersCopy:1,usersCopy:{$elemMatch:{token:token}}},function(err,data){
		if (data.length == 0) {
			callback({'res':false});
		} else {
			if (data[0].usersCopy.length != 0) {
				demands.find({idService:idService,token:token,usernameMain:usernameMain},function(err,datax){
					if (datax.length != 0) {
						if (datax[0].pt == 0) {
							callback({'res':true});
						} else {
							callback({'res':false});
						}
					} else {
						callback({'res':false});
					}
				});
			} else {
				callback({'res':false});
			}
		}
	});
}

exports.vote = function(idService,token,pt,callback) {
	demands.update({idService:idService, token:token}, {$set:{pt:pt}},function(err){
		if (err) {
			callback({'res':false, 'response':"Error Demands, you have not voted this car."});
		} else {
			users.update({_id:token}, {$inc:{ptc:pt,pttc:10}},function(err){
				if (err) {
					callback({'res':false, 'response':"Error Users, you have not voted this car."});
				} else {
					callback({'res':true, 'response':"Successfully Cars, you have voted this car."});
				}
			});
		}
	});
}
